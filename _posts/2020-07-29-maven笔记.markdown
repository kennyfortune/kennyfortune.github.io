---
layout:     post
title:      maven笔记
subtitle:   maven与idea的集成使用
date:       2020-07-29
author:     deponia
header-img: img/post-sisyphus.jpg
catalog: true
tags:
    - maven
---





> 开发一直没有太去细究maven的具体使用，都是凑合着用用，期间遇到了很多环境问题。实习后解决依赖升级问题中对maven的使用有了新的感知
>
> 记录一下
>
> ide：idea
>
> os：win10
>
> 参考：
>
> https://www.cnblogs.com/sandyflower/p/11600058.html
>
> https://www.cnblogs.com/fanqiexin/p/11360611.html
>
> 官方网址：
>
> http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# 1.MAVEN配置

## 1.1 配置文件

### **不同环境的配置**

我们可以有多个地方定义profile。定义的地方不同，它的作用范围也不同。

- 针对于特定项目的profile配置我们可以定义在该项目的pom.xml中。
- 针对于特定用户的profile配置，我们可以在用户的settings.xml文件中定义profile。该文件在用户家目录下的“.m2”目录下。
- 全局的profile配置。全局的profile是定义在Maven安装目录下的“conf/settings.xml”文件中的。

最终所有的profile会出现在idea maven的profile里，我们通过勾选选择执行时的profile。

> 一般来说一个公司会有一个专门的全局setting.xml，来定义公司内部的repository和不同的环境

### **定义的信息**

profile中能够定义的配置信息跟profile所处的位置是相关的。以下就分两种情况来讨论，一种是定义在settings.xml中，另一种是定义在pom.xml中。

1. **定义在setting.xml中**

   当profile定义在settings.xml中时意味着该profile是全局的，它会对所有项目（文件在 Maven 安装目录下）或者某一用户（文件在 用户目录下）的所有项目都产生作用。 

   此时 Setting.xml 中 profile 下可定义的标签主要有：

   - repositories
   - pluginRepositories
   - properties：定义在\<properties>里面的键值对可以在pom.xml中使用

> profile外可以定义mirror，用来指定仓库的镜像。设置后会导致被镜像的仓库访问不到，会从镜像取依赖。
>
> 所以推荐写法为，内部的repository+阿里云的repository。（maven原来的仓库没有滑滑梯无法访问）
>
> ps：阿里云仓库肯定不如官方仓库全更新快，有需求的挂滑滑梯上官方仓库下吧
>
> ps：现在各大仓库连接都转https了，下依赖会经常爆证书错误，一般等个10s，20s在reimport就好了。

一个配仓库的例子

```xml
<profile>
      <repositories>
        <repository>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
          <id>central-dev</id>
          <name>libs-release</name>
          <url>http://***********/dev</url>
        </repository>
        <repository>
          <snapshots />
          <id>snapshots-dev</id>
          <name>libs-snapshot</name>
          <url>http:********************dev</url>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>libs-release</name>
          <url>http:************************/dev</url>
        </pluginRepository>
        <pluginRepository>
          <snapshots />
          <id>snapshots</id>
          <name>libs-snapshot</name>
          <url>http*******************88888dev</url>
        </pluginRepository>
      </pluginRepositories>
      <id>dev</id>
    </profile>
```

2. **定义在pom.xml中（文件在项目里面）**

   此时 pom.xml 中标签主要有：

   - repositories
   - pluginReponsitories
   - dependencies
   - plugins
   - properties
   - dependencyManagement
   - distributionManagement

   同理

### **profile的激活**

1. 在setting.xml中

   但会出现如上定义了两个，此时生效两个 profile，pom.xml 在使用 hello 这个 property的时候，是按照 **profile 定义的先后顺序来进行覆盖取值的，然后后面定义的会覆盖前面定义的。**     

   **默认激活的 profile 在任何项目打包中都会被激活，它是全局的。**

```xml
<activeProfiles>     
	<activeProfile>profileTest2</activeProfile>
    <activeProfile>profileTest1</activeProfile>
</activeProfiles> 
```

2. 在pom.xml中

   -  **mvn -P !profile**

   - 设置默认激活

     ```xml
     <profiles> 
         <profile> 
             <id>profileTest1</id> 
             <properties> 
                 <hello>world</hello> 
             </properties> 
             <activation> 
                 <activeByDefault>true</activeByDefault> 
             </activation> 
         </profile> 
     </profiles>
     ```

   - 根据jdk激活

     ```xml
     <profiles> 
         <profile> 
             <id>profileTest1</id> 
             <jdk>1.5</jdk>    //JDK版本的前缀匹配,当JDK的版本号以"1.5"开头时, 该配置将被触发
         </profile> 
     <profiles> 
     ```

   - 根据操作系统来激活profile

     ```xml
     <profile>
            <activation>
                 <os>
                      <name>Windows XP</name>   
                       <family>Windows</family>  
                       <arch>x86</arch> 
                       <version>5.1.2600</version> 
                 </os>    
            </activation>
     </profile>
     ```

   - 根据环境变量（用户\系统变量）

     ```xml
     <profile>
            <activation>
                 <property>
                      <name>environment</name>
                      <value>test</value>
                 </property>
            </activation>
     </profile>
     ```

     > 不设value的话，无论为何值，只要有变量，都会触发生效该配置
     >
     > 需要参数 -Denvironment=test

### **生效顺序**

实际生效profile（顺序 : settings.xml ->本工程pom.xml ->父pom.xml）

**注意事项：**

- 针对每份文件（settings.xml \ 本工程 pom.xml \ 父工程 pom.xml），打包时指定了 profile，若文件 中有指定的 profile 直接激活 指定的 profile，没有则使用默认激活的 profile；
- 针对每份文件（settings.xml \ 本工程 pom.xml \ 父工程 pom.xml），打包时未指定 profile，若文件 中有默认激活的 profile 则使用默认激活的 profile，若没有则不使用该文件中的任何 profile；
- pom.xml 中的 activeByDefault 的 profile 若定义了 dependencies ，则依赖的包在任何打包形式下都会被依赖进来；

## 1.2 父maven

maven主要作用：在需要高并发访问条件下构建分区集群项目时，提供一个稳定版本依赖和排除重复jar包引入，减少结构冗余，从侧面增加代码运行速度

优点：保证依赖版本的一致性

![img](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1602531-20190815204956971-648790226.jpg)

首先在父工程（test）的pom.xml文件中引入经过dependencyManagement束缚的jar包，以便子工程进行重写引用

**父pom**

> 子pom重写引用idea会有标识显示，方便识别、跳转

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.aaa.fx.maven</groupId>
    <artifactId>test</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <!--//此处为已经被引用的module文件：-->
    <modules>
        <module>mapper</module>
        <module>model</module>
        <module>service</module>
        <module>web</module>
    </modules>

    <!--dependencyManagement此标签为设定jar包不会对子对象继承，子对象若需要继承则需要在自己的pom.xml文件中进行特殊声明重写，需要注意的是。重写的时候不需要加版本号-->
    <dependencyManagement>
        <dependencies>
            <!--
                此为mysql的驱动包
            -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.38</version>
            </dependency>
            <dependency>
                <groupId>net.sourceforge.nekohtml</groupId>
                <artifactId>nekohtml</artifactId>
                <version>1.9.21</version>
            </dependency>
            <!--
                spring
            -->
            <!--
                mybatis
            -->
            <!--
                shiro
            -->
        </dependencies>
    </dependencyManagement>
</project>
```

**子pom**

parent的方式引用

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>test</artifactId>
        <groupId>com.aaa.fx.maven</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    .......
</project>
```



## 1.3 Springboot集成maven

> 准确来说两者的profile没有关系，可以各自单独设置
>
> 但往往业务中我们需要配一整套环境（dev,integration,release..等）
>
> maven每个业务环境有个profile，springboot每个环境有个profile。业务上它们就联系在一起了。

**springboot 与 maven协同配置**

yml中

```yml
spring:
  application:
    name: web
  profiles:
    active: "@profileActive@"
...
---
spring:
  profiles: dev
...
---
spring:
  profiles: release
...
```

setting或项目pom中

```xml
<profile>
	<id>dev</id>
    <properties>
    	<profileActive>dev</profileActive>
    </properties>
</profile>
```

通过在maven配置中设置属性，yml引用这个属性，达成协同profile的作用

**占位符**

如果时parent的方式引入springboot，继承了springboot的properties

```xml
<resource.delimiter>@</resource.delimiter>
```

导致了`@profileActive@`的形式引用

加入通过depenency引入，则应该是pom默认的`${profileActive}`的方式

# 2.MAVEN LIFECYCLE

> http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
>
> 官方文档好好看

## 2.1 **生命周期概念**

生命周期指的是软件打包部署的各个阶段，分三大类周期。

**Clean Lifecycle**

| Phase        | Description                                                  |
| :----------- | :----------------------------------------------------------- |
| `pre-clean`  | execute processes needed prior to the actual project cleaning |
| `clean`      | remove all files generated by the previous build             |
| `post-clean` | execute processes needed to finalize the project cleaning    |

**Default Lifecycle**

| Phase                     | Description                                                  |
| :------------------------ | :----------------------------------------------------------- |
| `validate`                | validate the project is correct and all necessary information is available. |
| `initialize`              | initialize build state, e.g. set properties or create directories. |
| `generate-sources`        | generate any source code for inclusion in compilation.       |
| `process-sources`         | process the source code, for example to filter any values.   |
| `generate-resources`      | generate resources for inclusion in the package.             |
| `process-resources`       | copy and process the resources into the destination directory, ready for packaging. |
| `compile`                 | compile the source code of the project.                      |
| `process-classes`         | post-process the generated files from compilation, for example to do bytecode enhancement on Java classes. |
| `generate-test-sources`   | generate any test source code for inclusion in compilation.  |
| `process-test-sources`    | process the test source code, for example to filter any values. |
| `generate-test-resources` | create resources for testing.                                |
| `process-test-resources`  | copy and process the resources into the test destination directory. |
| `test-compile`            | compile the test source code into the test destination directory |
| `process-test-classes`    | post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. |
| `test`                    | run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed. |
| `prepare-package`         | perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. |
| `package`                 | take the compiled code and package it in its distributable format, such as a JAR. |
| `pre-integration-test`    | perform actions required before integration tests are executed. This may involve things such as setting up the required environment. |
| `integration-test`        | process and deploy the package if necessary into an environment where integration tests can be run. |
| `post-integration-test`   | perform actions required after integration tests have been executed. This may including cleaning up the environment. |
| `verify`                  | run any checks to verify the package is valid and meets quality criteria. |
| `install`                 | install the package into the local repository, for use as a dependency in other projects locally. |
| `deploy`                  | done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects. |

**Site Lifecycle**

| Phase         | Description                                                  |
| :------------ | :----------------------------------------------------------- |
| `pre-site`    | execute processes needed prior to the actual project site generation |
| `site`        | generate the project's site documentation                    |
| `post-site`   | execute processes needed to finalize the site generation, and to prepare for site deployment |
| `site-deploy` | deploy the generated site documentation to the specified web server |

## 2.2 生命周期与插件

### **默认插件与默认的生命周期**

上述的phases就是maven的声明周期的阶段，对于打包不同格式的软件，其拥有的周期也不一定相同。

**phases的具体操作需要具体的插件去完成。这个具体的操作就是plugin:goal,代表的插件的功能/方法**

> 有点类似接口和实现，且maven有帮我们默认实现
>
> idea中在maven窗口，点开plugin可以看见各个plugin的goal。

**maven为我们提供了默认的插件 和 各类不同文件的默认打包方式。**

**也就是说各个phase会执行什么goal，maven帮我们预设好了**

比如：打包jar

Default Lifecycle Bindings - Packaging `ejb` / `ejb3` / `jar` / `par` / `rar` / `war`

| Phase                    | plugin:goal                                                  |
| :----------------------- | :----------------------------------------------------------- |
| `process-resources`      | `resources:resources`                                        |
| `compile`                | `compiler:compile`                                           |
| `process-test-resources` | `resources:testResources`                                    |
| `test-compile`           | `compiler:testCompile`                                       |
| `test`                   | `surefire:test`                                              |
| `package`                | `ejb:ejb` *or* `ejb3:ejb3` *or* `jar:jar` *or* `par:par` *or* `rar:rar` *or* `war:war` |
| `install`                | `install:install`                                            |
| `deploy`                 | `deploy:deploy`                                              |

比如：打包pom

Default Lifecycle Bindings - Packaging `pom`

| Phase     | plugin:goal       |
| :-------- | :---------------- |
| `package` |                   |
| `install` | `install:install` |
| `deploy`  | `deploy:deploy`   |

> http://maven.apache.org/plugins/index.html
>
> 这些plugin:goal可以看见官方的maven核心插件

### 自定义构建过程

默认的构建打包过程可能并不能满足用户的需求，我们可以引入各类其他插件，去定制化我们的打包流程。

比如：scala语言写项目打包的时候，无法正常识别.scala文件编译，需要引入一个用于scala compile的插件到compile的phases中，来协助我们的打包流程。

自定义方式两种

**通过命令直接自定义执行**

`mvn clean dependency:copy-dependencies package`

其中clean 和 package是phase，执行maven默认的的goal，中间dependency:copy-dependencies是自己加的goal

build可以放在profile外 或 profile内 （项目全局、或者特定profile生效）

**在pom中引入build标签**

**resource**的子标签

targetPath：指定build后的resource存放的文件夹，默认是basedir。通常被打包在jar中的resources的目标路径是META-INF

filtering：true/false，表示为这个resource，filter是否激活

directory 定义resource文件所在的文件夹，默认为${basedir}/src/main/resources

includes 指定哪些文件将被匹配，以*作为通配符

excludes 指定哪些文件将被忽略

testResources 定义和resource类似，只不过在test时使用

**plugin的子标签**

groupid、artifactId、version：标识了插件的依赖

extensions：是否允许功能扩展

inherited：是否允许子pom继承

configuration：这个插件的设置，有什么设置要看具体插件

> 有的不用配置
>
> 有的必须要，比如jar，打包的时候要有个mainfest标签说明main函数入口的类

dependency：插件要引入的依赖

executions：执行的goal，可以多个

> 规定的执行goal的顺序。
>
> 一个phase的总执行顺序：来自packaging默认的goal,  pom设置的goal，继承的goal会先执行。

```xml
<build>
	<resources>  
		<resource>  
			<targetPath>META-INF/plexus</targetPath>  
			<filtering>true</filtering>  
	    	<directory>${basedir}/src/main/plexus</directory>  
        	<includes>  
            	<include>configuration.xml</include>  
        	</includes>  
			<excludes>  
	        	<exclude>**/*.properties</exclude>  
			</excludes>  
		</resource>  
    </resources>  
    <testResources>  
        ...  
    </testResources>  
	<plugins>  
        <plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-jar-plugin</artifactId>  
            <version>2.0</version>  
            <extensions>false</extensions>  
            <inherited>true</inherited>  
            <configuration>  
                <classifier>test</classifier>  
            </configuration>  
            <dependencies>...</dependencies>  
            <executions>...</executions>  
        </plugin>  
    </plugins> 
</build>
```

