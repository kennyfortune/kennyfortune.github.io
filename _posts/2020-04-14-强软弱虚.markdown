---
layout:     post
title:      强软弱虚
subtitle:   java引用类型
date:       2020-04-13
author:     deponia
header-img: img/post-sisyphus.jpg
catalog: true
tags:
    - 引用类型
---

# 强引用

gc不可达的时候回收

# 软引用

空间不足的时候gc回收

常见应用：缓存，防止因为缓存产生OOM

# 弱引用

GC一定会被回收

常见应用：ThreadLocal

每个线程Thread拥有ThreadLocalMap，用来保存线程本地的对象、数据

ThreadLocal里的Entry便是弱引用

我们再使用ThreadLocal的时候要在线程外部声明 static的ThreadLocal对象（强引用）

通过在线程中调用这个实例的set方法将自己设置进线程的Map里

这时候线程的map持有TreadLocal对象，如果是强引用，外部设null后，导致内存泄漏

所以entry采用的是弱引用

![1586811921751](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586811921751.jpg)

> 注意点1：value仍有内存泄漏的情况
>
> 注意点2：如果TreadLocal的value是对象指针，通过指针操作对象，仍是共享的
>
> 这是侯要重写，保证返回的指针不相同
>
> ```java
> static ThreadLocal<List<Integer>> threadLocal = new ThreadLocal<List<Integer>>() {
> @Override
> protected List<Integer> initialValue() {
>  //确保ThreadLocal的对象是独立的
> return new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
> }
> ```

# 虚引用

https://www.jianshu.com/p/769769b16cb6

DirectByteBuffer NIO用来管理堆外内存的对象

不像普通的对象，我们回收之后不关心别的操作

回收DirectByteBuffer的时候我们需要一并回收堆外内存，不然会导致OOM

这时候使用虚引用，DirectByteBuffer gc的时候，gc信息进入Queue，JVM得到Queue的信息就知道回收堆外内存

![1586813262091](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586813262091.jpg)

