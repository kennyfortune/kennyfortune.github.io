---
layout:     post
title:      多线程与高并发
subtitle:   java实现
date:       2020-04-13
author:     deponia
header-img: img/post-sisyphus.jpg
catalog: true
tags:
    - 多线程
    - 并发
---



> 以linux上的java源码为基准，因为底层代码不同系统不一样

# 来源

https://www.bilibili.com/video/BV1R7411C7rf?p=3

# 参考

http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html

# 1.CAS基本概念

**compare and swap**

![1586794022237](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586794022237.jpg)

确认没被修改才更新，避免后面更新的操作覆盖前面更新的操作

**ABA问题**

别的程序修改A值之后还是A值，通过比较判别不出修改没有

解决方式

- 布尔类型标注下

- 加入版本号，每次修改增加版本号，通过版本号判断 版本号 AtomicStampedReference

# 2.原子类的实现：CAS

```java
//基本类型线程不安全
int i = 0; 
i++;
```

**java解决方式：原子类**

AtomicInteger,AtomicLong,AtomicBoolean等

```java
//AtomicInteger.class的修改方法，U是Unsafe.class
public final boolean compareAndSet(int expectedValue, int newValue) {
	return U.compareAndSetInt(this, VALUE, expectedValue, newValue);
}
```

```java
//Unsafe类 调用hotspot的本地源码
@HotSpotIntrinsicCandidate
public final native boolean compareAndSetInt(Object var1, long var2, int var4, int var5);
```

> jvm是一种规范,hotspot是jvm的一种实现
>
> 一般底层方法都是c、c++、混着汇编写的、高效

对应的底层汇编

```nasm
inline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {
  int mp = os::is_MP();
  __asm__ volatile (LOCK_IF_MP(%4) "cmpxchgl %1,(%3)"
                    : "=a" (exchange_value)
                    : "r" (exchange_value), "a" (compare_value), "r" (dest), "r" (mp)
                    : "cc", "memory");
  return exchange_value;
}
```

LOCK_IF_MP 如果是多个处理器(multi-processor) 需要执行

- 返回 (_processor_count != 1) || AssumeMP

核心是 lock cmpxchg

- cmpxchg就是机器自带的汇编指令

- lock指令在执行后面指令的时候锁定北桥信号（不锁总线）

# 3.markword基本概念

**工具 JOL java object layout** 

```xml
        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <version>0.9</version>
        </dependency>
```

用法

```java
public static void main(String[] args) {
    Object o = new Object();
	System.out.println(ClassLayout.parseInstance(o).toPrintable());
}
```

**普通对象**

![1586795890264](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586795890264.jpg)

| 名称                   | 大小                                                         | 作用                      |
| ---------------------- | ------------------------------------------------------------ | ------------------------- |
| markword               | 8个字节                                                      | 锁的信息、GC信息          |
| class pointer 类型指针 | 压缩指针开启 4个字节，压缩指针关闭 8个字节（jvm启动命令设置） | 指向对象的类型信息        |
| instance data 类型数据 | 取决于成员变量的大小之和                                     | 存放成员变量              |
| padding 对其           | 不定                                                         | 使得对象大小为8字节的倍数 |

> java ... -XX:+UseCompressedClassPointers -XX:+UseCompressedOops
>
> oops ordinary obeject pointers 普通对象指针
>
> 决定压缩指针开启不开启

**数组对象**

![1586796357159](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586796357159.jpg)

# 4.synchronized关键字实现：锁升级机制（和markword与CAS密切相关

**synchronized基本概念 用法**

它是一个互斥锁，满足互斥锁两大特性

- 互斥性：一段时间只能一个线程拥有
- 可见性：在锁释放之前，共享变量的修改要对接下来获得锁的其他线程可见

非公平锁：锁升级过程中CAS获取，重量级锁中唤醒只能随机唤醒或全部唤醒

可重入锁

用法三种

- 方法锁
  - 锁静态方法：相当于类锁，所有对象访问此方法的时候是同步的
  - 锁非静态方法：相当于对象锁，统一对象访问此方法的时候是同步的
- 对象锁
  - 锁住的是对象本身：访问此对象的时候线程是同步的，知道代码块结束
- 类锁
  - 本质锁住的是对象的class对象，访问此对象的静态资源（静态成员变量、静态方法）是同步的
  - 和对象锁不冲突，访问不了静态资源不影响访问对象的非静态资源

**上锁层级**

- java源码 synchronized(o)

- 字节码层级 代码块开头结尾分别加上 monitorenter moniterexit

  > 进入时：monitorenter
  >
  > **每个对象有一个监视器锁（monitor）**。**当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权**，过程如下：
  > 1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。
  > 2、如果该线程已经占有该monitor，又重新进入，则进入monitor的进入数加1。
  > 3、如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。
  >
  > 
  > 退出时：monitorexit
  >
  > 执行monitorexit的线程必须是objectref所对应的monitor的所有者。
  > 指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个
  > monitor 的所有权。
  >
  >  
  >
  > 其实**wait/notify等方法也依赖于monitor对象**，这就是为什么**只有在同步的块或者方法中才能调用wait/notify等方法**，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。

  

- jvm层级 体现在markword

**markword锁升级机制**

![1586798135745](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586798135745.jpg)

注意：GC除了最低两位的11其他应该为空

**偏向锁**

- 并发量少的情况下，防止一个线程不停申请、释放锁带来的损耗

- 申请偏向锁后，下次申请不会再重新申请锁

- 一旦发生并发，立刻锁撤销、锁升级

- 线程再自己的线程栈生成LockRecord，竞争的时候通过CAS操作，将markword修改成指向这个LockRecord的指针，修改成功的竞争成功

- epoch和批量偏向、批量撤销相关（使用需要启动参数设置，且影响标准流程）

  > 批量重偏向与批量撤销渊源：从偏向锁的加锁解锁过程中可看出，当只有一个线程反复进入同步块时，偏向锁带来的性能开销基本可以忽略，但是当有其他线程尝试获得锁时，就需要等到safe point时，再将偏向锁撤销为无锁状态或升级为轻量级，会消耗一定的性能，所以在多线程竞争频繁的情况下，偏向锁不仅不能提高性能，还会导致性能下降。于是，就有了批量重偏向与批量撤销的机制。
  >
  > 原理以class为单位，为每个class维护解决场景批量重偏向（bulk rebias）机制是为了解决：一个线程创建了大量对象并执行了初始的同步操作，后来另一个线程也来将这些对象作为锁对象进行操作，这样会导致大量的偏向锁撤销操作。批量撤销（bulk revoke）机制是为了解决：在明显多线程竞争剧烈的场景下使用偏向锁是不合适的。
  >
  > 一个偏向锁撤销计数器，每一次该class的对象发生偏向撤销操作时，该计数器+1，当这个值达到重偏向阈值（默认20）时，JVM就认为该class的偏向锁有问题，因此会进行批量重偏向。每个class对象会有一个对应的epoch字段，每个处于偏向锁状态对象的Mark Word中也有该字段，其初始值为创建该对象时class中的epoch的值。每次发生批量重偏向时，就将该值+1，同时遍历JVM中所有线程的栈，找到该class所有正处于加锁状态的偏向锁，将其epoch字段改为新值。下次获得锁时，发现当前对象的epoch值和class的epoch不相等，那就算当前已经偏向了其他线程，也不会执行撤销操作，而是直接通过CAS操作将其Mark Word的Thread Id 改成当前线程Id。当达到重偏向阈值后，假设该class计数器继续增长，当其达到批量撤销的阈值后（默认40），JVM就认为该class的使用场景存在多线程竞争，会标记该class为不可偏向，之后，对于该class的锁，直接走轻量级锁的逻辑。
  >
  > 简单来说：epoch默认设置时，>=20 <40 批量重偏向时多线程不执行锁撤销，而是用CAS直接改markword用对象，>= 40时认为批量竞争激烈，批量撤销

- 不可重偏向

- 默认情况，4秒时延

  > VM虚拟机自己有一些默认启动的线程，里面有好多sync代码，这些sync代码启动时就知道肯定会有竞争，如果使用偏向锁，就会造成偏向锁不断的进行锁撤销和锁升级的操作，效率较低。

- 修改启动参数 -XX:BiasedLockingStartupDelay=0

  没有时延

  new Object () - > 101 偏向锁 ->线程ID为0 -> Anonymous BiasedLock
  打开偏向锁，new出来的对象，默认就是一个可偏向匿名对象101

**轻量级锁 自旋锁**

- 并发量少的情况下，线程自旋（消耗CPU）
- 竞争加剧：有线程超过10次自旋， -XX:PreBlockSpin， 或者自旋线程数超过CPU核数的一半， 1.6之后，加入自适应自旋 Adapative Self Spinning ， JVM自己控制
  升级重量级锁：-> 向操作系统申请资源，linux mutex , CPU从3级-0级系统调用，线程挂起，进入等待队列，等待操作系统的调度，然后再映射回用户空间

**重量级锁**

- 参考线程管理内容

**注意点一**

当一个对象已经计算过identity hash code，它就无法进入偏向锁状态；

当一个对象当前正处于偏向锁状态，并且需要计算其identity hash code的话，则它的偏向锁会被撤销，并且锁会膨胀为重量锁；

重量锁的实现中，类里有字段可以记录非加锁状态下的mark word，其中可以存储identity hash code的值。或者简单说就是重量锁可以存下identity hash code。

**synchronized vs Lock (CAS)**

在高争用 高耗时的环境下synchronized效率更高
在低争用 低耗时的环境下CAS效率更高
synchronized到重量级之后是等待队列（不消耗CPU）
CAS（等待期间消耗CPU）

**特殊情况：锁消除 lock eliminate**

```java
public void add(String str1,String str2){
         StringBuffer sb = new StringBuffer();
         sb.append(str1).append(str2);
}
```

我们都知道 StringBuffer 是线程安全的，因为它的关键方法都是被 synchronized 修饰过的，但我们看上面这段代码，我们会发现，sb 这个引用只会在 add 方法中使用，不可能被其它线程引用（因为是局部变量，栈私有），因此 sb 是不可能共享的资源，JVM 会自动消除 StringBuffer 对象内部的锁。

**特殊情况：锁粗化 lock coarsening**

```java
public String test(String str){
       
       int i = 0;
       StringBuffer sb = new StringBuffer():
       while(i < 100){
           sb.append(str);
           i++;
       }
       return sb.toString():
}
```

JVM 会检测到这样一连串的操作都对同一个对象加锁（while 循环内 100 次执行 append，没有锁粗化的就要进行 100 次加锁/解锁），此时 JVM 就会将加锁的范围粗化到这一连串的操作的外部（比如 while 虚幻体外），使得这一连串操作只需要加一次锁即可。

**特殊情况 锁降级**

https://www.zhihu.com/question/63859501

# 5.volatile作用实现

**明确基本概念**

来与synchronized对比

- volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。
- volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的
- volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性
- volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。
- volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化

首先需要理解线程安全的两个方面：**执行控制**和**内存可见**。

**执行控制**的目的是控制代码执行（顺序）及是否可以并发执行。

**内存可见**控制的是线程执行结果在内存中对其它线程的可见性。根据[Java内存模型](https://www.cnblogs.com/kaleidoscope/p/9505829.html)的实现，线程在具体执行时，会先拷贝主存数据到线程本地（CPU缓存），操作完成后再把结果从线程本地刷到主存。

`synchronized`关键字解决的是执行控制的问题，它会阻止其它线程获取当前对象的监控锁，这样就使得当前对象中被`synchronized`关键字保护的代码块无法被其它线程访问，也就无法并发执行。更重要的是，`synchronized`还会创建一个**内存屏障**，内存屏障指令保证了所有CPU操作结果都会直接刷到主存中，从而保证了操作的内存可见性，同时也使得先获得这个锁的线程的所有操作，都**happens-before**于随后获得这个锁的线程的操作。

`volatile`关键字解决的是内存可见性的问题，会使得所有对`volatile`变量的读写都会直接刷到主存，即保证了变量的可见性。这样就能满足一些对变量可见性有要求而对读取顺序没有要求的需求。

使用`volatile`关键字仅能实现对原始变量(如boolen、 short 、int 、long等)操作的原子性，但需要特别注意， `volatile`不能保证复合操作的原子性，即使只是`i++`，实际上也是由多个原子操作组成：`read i; inc; write i`，假如多个线程同时执行`i++`，`volatile`只能保证他们操作的`i`是同一块内存，但依然可能出现写入脏数据的情况。

**使用条件**

1. 对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。
2. 该变量没有包含在具有其他变量的不变式中。

### **用途1：线程可见性**

```java
public class T01_ThreadVisibility {
    private static volatile boolean flag = true;

    public static void main(String[] args) throws InterruptedException {
        new Thread(()-> {
            while (flag) {
                //do sth
            }
            System.out.println("end");
        }, "server").start();


        Thread.sleep(1000);

        flag = false;
    }
}
```

> 首先了解下基本概念

**cpu cache line**

- 缓存行对齐
  缓存行64个字节是CPU同步的基本单位，缓存行隔离会比伪共享效率要高
- cpu层级的数据一致性，已缓存行为单位

**伪共享**

- 由于每次读取64字节的块进入cache

- 比如这64字节中存取了两个变量x，y

- 对于程序来说，x，y是非共享的，但是对于CPU来说它是伪共享的（在同一个缓存行内）

- 如果我修改了x，CPU1的cache修改了，同事CPU1要将修改通知到CPU2，也修改对应的缓存行，导致效率的损失

**Disruptor**

- Disruptor 是一个 Java 的并发编程框架
- 它用缓存行对齐的技术，解决了伪共享中导致cache不停修改的效率问题

**MESI CPU缓存一致性协议**

- 有很多种实现

- https://www.cnblogs.com/z00377750/p/9180644.html

**总线锁**

- mesi不适用的情况下使用，比如不能缓存的数据，跨越多个缓存行的数据的时候

- 前端总线(也叫CPU总线)是所有CPU与芯片组连接的主干道，负责CPU与外界所有部件的通信，包括高速缓存、内存、北桥，其控制总线向各个部件发送控制信号、通过地址总线发送地址信号指定其要访问的部件、通过数据总线双向传输。在CPU1要做 i++操作的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存，也就是阻塞了其他CPU，使该处理器可以独享此共享内存。
- 一级cache是CPU各自拥有的（一般在CPU内部），二三级是大家共享的，总线锁只允许一个CPU操作二三级缓存中的东西，被独占

以上的实现保证了volatile的线程可见性

### **用途2：防止指令重排序**

**问题根源**

CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系

**内存屏障**

保证不乱序的手段

sfence: store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。 

lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。 

mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。


> 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序
>
> **换句话说CAS、synchronIZED底层也是使用了硬件提供的内存屏障的机制**

**内存屏障 JVM的规范：**

> LoadLoad屏障： 对于这样的语句Load1; LoadLoad; Load2，
>
> 在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。
>
> StoreStore屏障：
>
> 对于这样的语句Store1; StoreStore; Store2，
>
> 在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。
>
> LoadStore屏障：
>
> 对于这样的语句Load1; LoadStore; Store2，
>
> 在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。
>
> StoreLoad屏障： 对于这样的语句Store1; StoreLoad; Load2，
>
>  在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。

**volatile的实现细节**

1. 字节码层面 ACC_VOLATILE

2. JVM层面 volatile内存区的读写 都加屏障

   > StoreStoreBarrier
   >
   > volatile 写操作
   >
   > StoreLoadBarrier

   > LoadLoadBarrier
   >
   > volatile 读操作
   >
   > LoadStoreBarrier

3. OS和硬件层面 https://blog.csdn.net/qq_26222859/article/details/52235930 hsdis - HotSpot Dis Assembler windows lock 指令实现

# 从DLC单例问题了解并发下的对象创建

**Double Check Lock**

**普通单例：**

```java
public class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        if(null == instance) {                    // line A
            instance = new Singleton();        // line B
        }        
        return instance;        
    }
}
```

两个线程并发调用Singleton.getInstance()，假设线程一先判断instance是否为null，即代码中line A进入到line B的位置。刚刚判断完毕后，JVM将CPU资源切换给线程二，由于线程一还没执行line B，所以instance仍然为空，因此线程二执行了new Singleton()操作。片刻之后，线程一被重新唤醒，它执行的仍然是new Singleton()操作，这样问题就来了，new出了两个instance

**加入synchronized单例：**

```java
public class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        synchronized(Singleton.class){
        	if(null == instance) {                    // line A
            	instance = new Singleton();        // line B
        	}        
        }
        return instance;        
    }
}
```

之后的每次调用会因为synchronized的加锁导致性能损耗

**双重锁定检查（DCL，Double Check Lock）**

```java
public class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        if(null == instance) {    // 线程二检测到instance不为空
            synchronized (Singleton.class) {
                if(null == instance) {                    
                    instance = new Singleton();    // 线程一被指令重排，先执行了赋值，但还没执行完构造函数（即未完成初始化）    
                }
            }
        }  
        return instance;     // 后面线程二执行时将引发：对象尚未初始化错误   
    }
}
```

要明白这个为什么仍然行不通，让我们了解下接下来的过程，再看注释

![1586809295498](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586809295498.jpg)

```asm
void cantBeZero(int) throws java.lang.Exception;
  descriptor: (I)V
  flags:
  Code:
   stack=2, locals=2, args_size=2
    0: iload_1
    1: ifne     12
    4: new      #2        
    // class java/lang/Exception
    7: dup
    8: invokespecial #3        
    // Method java/lang/Exception."<init>":()V
    11: athrow
    12: return
```

1) 其中new指令在java堆上为Exception对象分配内存空间，并将地址压入操作数栈顶；

2) 然后dup指令为复制操作数栈顶值，并将其压入栈顶，也就是说此时操作数栈上有连续相同的两个对象地址；

3) invokespecial指令调用实例初始化方法<init\>:()V，注意这个方法是一个实例方法，所以需要从操作数栈顶弹出一个this引用，也就是说这一步会弹出一个之前入栈的对象地址；

4) athrow指令从操作数栈顶取出一个引用类型的值，并抛出；

5) 最后由return指令结束方法。

> 可以看到，new字节码指令的作用是创建指定类型的对象实例、对其进行默认初始化，并且将指向该实例的一个引用压入操作数栈顶；
> 然后因为invokespecial会消耗掉操作数栈顶的引用作为传给构造器的“this”参数，所以如果我们希望在invokespecial调用后在操作数栈顶还维持有一个指向新建对象的引用，就得在invokespecial之前先“复制”一份引用——这就是这个dup的来源。
>
> 注意切记操作数栈跟调用栈是俩不同的东西

正因为指令重排序导致了，创建对象的时候先执行了athrow 后执行 invokespecial，instance不为null，但是初始化仍然没有完成，就会导致错误

**最终的解决方法，使用volatile**

```java
public class Singleton {
    private volatile static Singleton instance = null;
    public static Singleton getInstance() {
        if(null == instance) {   
            synchronized (Singleton.class) {
                if(null == instance) {                    
                    instance = new Singleton();  
                }
            }
        }  
        return instance;    
    }
}
```

# 6.强软弱虚引用

**强引用**

gc不可达的时候回收

**软引用**

空间不足的时候gc回收

常见应用：缓存，防止因为缓存产生OOM

**弱引用**

GC一定会被回收

常见应用：ThreadLocal

每个线程Thread拥有ThreadLocalMap，用来保存线程本地的对象、数据

ThreadLocal里的Entry便是弱引用

我们再使用ThreadLocal的时候要在线程外部声明 static的ThreadLocal对象（强引用）

通过在线程中调用这个实例的set方法将自己设置进线程的Map里

这时候线程的map持有TreadLocal对象，如果是强引用，外部设null后，导致内存泄漏

所以entry采用的是弱引用

![1586811921751](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586811921751.jpg)

> 注意点1：value仍有内存泄漏的情况
>
> 注意点2：如果TreadLocal的value是对象指针，通过指针操作对象，仍是共享的
>
> 这是侯要重写，保证返回的指针不相同
>
> ```java
> static ThreadLocal<List<Integer>> threadLocal = new ThreadLocal<List<Integer>>() {
> @Override
> protected List<Integer> initialValue() {
>     //确保ThreadLocal的对象是独立的
> return new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
> }
> ```

**虚引用**

https://www.jianshu.com/p/769769b16cb6

DirectByteBuffer NIO用来管理堆外内存的对象

不像普通的对象，我们回收之后不关心别的操作

回收DirectByteBuffer的时候我们需要一并回收堆外内存，不然会导致OOM

这时候使用虚引用，DirectByteBuffer gc的时候，gc信息进入Queue，JVM得到Queue的信息就知道回收堆外内存

![1586813262091](https://github.com/kennyfortune/kennyfortune.github.io/raw/master/img/1586813262091.jpg)

